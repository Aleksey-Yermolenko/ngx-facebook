{"version":3,"sources":["../../../src/components/fbml-component.spec.ts"],"names":[],"mappings":"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","file":"fbml-component.spec.js","sourceRoot":"","sourcesContent":["import { FBMLAttribute, FBMLComponent, FBMLInstanceMethod } from './fbml-component';\nimport { Component, ElementRef, Renderer2, DebugElement } from '@angular/core';\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\n\n\nclass FBTestComponent extends FBMLComponent {\n\n  _instance = {\n    testMethod: () => 'success',\n    testMethodWithArgs: (...args: any[]) => args.length\n  };\n\n  @FBMLAttribute\n  testAttr: string;\n\n  constructor(el: ElementRef, rnd: Renderer2) {\n    super(el, rnd, 'fb-test');\n  }\n\n  @FBMLInstanceMethod\n  testMethod(): string { return; }\n\n  @FBMLInstanceMethod\n  testMethodWithArgs(arg1: string, arg2: string): number { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  template: ''\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\ndescribe('FBMLComponent', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  it('should create an element with class fb-test', () => {\n\n    const instance = TestBed.createComponent(FBTestComponent);\n    instance.detectChanges();\n    expect(instance.componentInstance).toBeDefined();\n    expect(Object.keys(instance.debugElement.classes)).toContain('fb-test');\n\n  });\n\n});\n\ndescribe('FBMLAttribute', () => {\n\n  let de: DebugElement,\n    comp: FBTestComponent,\n    fixture: ComponentFixture<FBTestComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FBTestComponent);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement;\n  });\n\n  it('should add data-test-attr attribute to element', () => {\n    comp.testAttr = 'test-val';\n    fixture.detectChanges();\n    expect(Object.keys(de.attributes)).toContain('data-test-attr');\n    expect(de.attributes['data-test-attr']).toEqual('test-val');\n    // should return value we set before\n    expect(comp.testAttr).toEqual('test-val');\n  });\n\n});\n\ndescribe('FBMLInstanceMethod', () => {\n\n  let de: DebugElement,\n    comp: FBTestComponent,\n    fixture: ComponentFixture<FBTestComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FBTestComponent);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement;\n  });\n\n  it('should do basic call to instance method', () => {\n    spyOn(comp._instance, 'testMethod').and.callThrough();\n    const res = comp.testMethod();\n    expect(comp._instance.testMethod).toHaveBeenCalled();\n    expect(res).toEqual('success');\n  });\n\n  it('should do call with args to instance method', () => {\n    spyOn(comp._instance, 'testMethodWithArgs').and.callThrough();\n    const res = comp.testMethodWithArgs('hello', 'world');\n    expect(comp._instance.testMethodWithArgs).toHaveBeenCalledWith('hello', 'world');\n    expect(res).toEqual(2);\n  });\n\n});\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}