{"version":3,"sources":["../../../src/components/fbml-component.spec.ts"],"names":[],"mappings":"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","file":"fbml-component.spec.js","sourceRoot":"","sourcesContent":["import { FBMLAttribute, FBMLComponent, FBMLInstanceMethod } from './fbml-component';\nimport { Component, ElementRef, Renderer2, DebugElement } from '@angular/core';\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\n\n\nclass FBTestComponent extends FBMLComponent {\n\n  _instance = {\n    testMethod: () => 'success',\n    testMethodWithArgs: (...args: any[]) => args.length\n  };\n\n  @FBMLAttribute\n  testAttr: string;\n\n  constructor(el: ElementRef, rnd: Renderer2) {\n    super(el, rnd, 'fb-test');\n  }\n\n  @FBMLInstanceMethod\n  testMethod(): string { return; }\n\n  @FBMLInstanceMethod\n  testMethodWithArgs(arg1: string, arg2: string): number { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  template: ''\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\ndescribe('FBMLComponent', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  it('should create an element with class fb-test', () => {\n\n    const instance = TestBed.createComponent(FBTestComponent);\n    instance.detectChanges();\n    expect(instance.componentInstance).toBeDefined();\n    expect(Object.keys(instance.debugElement.classes)).toContain('fb-test');\n\n  });\n\n});\n\ndescribe('FBMLAttribute', () => {\n\n  let de: DebugElement,\n    comp: FBTestComponent,\n    fixture: ComponentFixture<FBTestComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FBTestComponent);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement;\n  });\n\n  it('should add data-test-attr attribute to element', () => {\n    comp.testAttr = 'test-val';\n    fixture.detectChanges();\n    expect(Object.keys(de.attributes)).toContain('data-test-attr');\n    expect(de.attributes['data-test-attr']).toEqual('test-val');\n    // should return value we set before\n    expect(comp.testAttr).toEqual('test-val');\n  });\n\n});\n\ndescribe('FBMLInstanceMethod', () => {\n\n  let de: DebugElement,\n    comp: FBTestComponent,\n    fixture: ComponentFixture<FBTestComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ FBTestComponent ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FBTestComponent);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement;\n  });\n\n  it('should do basic call to instance method', () => {\n    spyOn(comp._instance, 'testMethod').and.callThrough();\n    const res = comp.testMethod();\n    expect(comp._instance.testMethod).toHaveBeenCalled();\n    expect(res).toEqual('success');\n  });\n\n  it('should do call with args to instance method', () => {\n    spyOn(comp._instance, 'testMethodWithArgs').and.callThrough();\n    const res = comp.testMethodWithArgs('hello', 'world');\n    expect(comp._instance.testMethodWithArgs).toHaveBeenCalledWith('hello', 'world');\n    expect(res).toEqual(2);\n  });\n\n});\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}